import unittest
from yasuoka_syounika_opendate import absence_day

class TestOpendate(unittest.TestCase):
    """
    test class of opendate
    """

    def test_absence_day(self):
        """
        subtestを使って複数条件をabsence_dayに渡してテストを実行する
        """

        test_patterns = [

            (['2019','12月','22日'], {'endingtime': '12:00', 'status': '診療時間外'} ),     # 通常診療の日、午前、診療前で時間外
            (['','',''], {'endingtime': '12:00', 'status': '診療中'}),         # 通常診療の日、午前、時間内
            (['','',''], {'endingtime': '18:00', 'status': '診療時間外'}),     # 通常診療の日、午後、診療前で時間外
            (['','',''], {'endingtime': '18:00', 'status': '診療中'}),         # 通常診療の日、午後、時間内
            (['','',''], {'endingtime': '18:00', 'status': '診療時間外'}),     # 通常診療の日、午後、診療終了後で時間外
            (['','',''], {'endingtime': '12:00', 'status': '診療時間外'}),     # 午後休診の日、午前、診療前で時間外
            (['','',''], {'endingtime': '12:00', 'status': '午後休診'}),       # 午後休診の日
            (['','',''], {'endingtime': '', 'status': '休診日'}),              # 休診日(日曜日)
            (['','',''], {'endingtime': '', 'status': '休診日'}),              # 休診日(祝日)
            (['','',''], {'endingtime': '', 'status': '休診日'}),              # 休診日(年末年始)
            (['2019','9月','3日'], {'endingtime': '', 'status': '休診日'}),    # 休診日(臨時休診)
            (['2019','8月','14日'], {'endingtime': '', 'status': '休診日'}),   # 休診日(連休の中日で臨時休診)

        """
            '2019', '9', '3', '午前', '10', '30', '火曜日'		
            '2019', '8', '9', '午前', '10', '30', ''
            '2019', '8', '10', '午前', '10', '30', ''
            '2019', '8', '11', '午前', '10', '30', ''
            '2019', '8', '12', '午前', '10', '30', ''
            '2019', '8', '13', '午前', '10', '30', ''
            '2019', '8', '14', '午前', '10', '30', ''
            '2019', '4', '30', '午前', '10', '30', ''	午後休診
            '2019', '4', '30', '午後', '2', '30', ''	午後休診
            '2019', '5', '1', '午前', '10', '30', ''	通常診療
            '2019', '5', '2', '午前', '10', '30', ''	
            '2019', '5', '3', '午前', '10', '30', ''
            '2019', '5', '4', '午前', '10', '30', ''
            '2019', '5', '5', '午前', '10', '30', ''
            '2019', '5', '6', '午前', '10', '30', ''

            '2019', '1', '7', '午前', '10', '30', ''	通常診療
            '2019', '1', '6', '午前', '10', '30', ''
            '2019', '1', '5', '午前', '10', '30', ''
            '2019', '1', '4', '午前', '10', '30', ''
            '2019', '1', '3', '午前', '10', '30', ''
            '2019', '1', '2', '午前', '10', '30', ''
            '2019', '1', '1', '午前', '10', '30', ''
            '2018', '12', '31', '午前', '10', '30', ''
            '2018', '12', '30', '午前', '10', '30', ''
            '2018', '12', '29', '午前', '10', '30', ''	午後休診
            '2018', '12', '29', '午後', '1', '30', ''
            '2018', '10', '2', '午前', '10', '30', ''
            '2018', '8', '15', '午前', '10', '30', ''
            '2018', '8', '14', '午前', '10', '30', ''
            '2018', '8', '13', '午前', '10', '30', ''
            '2018', '8', '12', '午前', '10', '30', ''
            '2018', '8', '11', '午前', '10', '30', ''
            '2018', '8', '10', '午前', '10', '30', ''
            '2018', '8', '9', '午前', '10', '30', ''

            '2018', '1', '6', '午前', '10', '30', ''
            '2018', '1', '5', '午前', '10', '30', ''
            '2018', '1', '4', '午前', '10', '30', ''
            '2018', '1', '3', '午前', '10', '30', ''
            '2018', '1', '2', '午前', '10', '30', ''
            '2018', '1', '1', '午前', '10', '30', ''
            '2017', '12', '31', '午前', '10', '30', ''
            '2017', '12', '30', '午前', '10', '30', ''
            '2017', '12', '29', '午前', '10', '30', ''	午後休診

            '8月1日（火曜日）は、職員健康診断のため休診します', 
            '8月11～15日は休診します',
            '4月15日（土曜日）は、院長学会出張のため、外来受付は午前11時で終了となります'],

            '2016': ['2016年の診療は12月29日（受付終了13時30分）までとなります', '12月30日から1月5日まで休診致します', '2017年は1月6日から通常通り診療致します', '2016年8月12日から16日まで休診となります'], 

            '2015': ['年内の診療は12月29日午前（受付終了12時）までとなります', '\n    2016年は1月6日より診療開始します', '10月31日（土）は院長が学会出張のため休診します', '\n\u30008月12日から18日まで休診致します', '8月11日の受け付けは昼12時までとなります']

"""
        ]

        for dt_nowday, expected_result in test_patterns:
            with self.subTest(dt_nowday=dt_nowday):
                self.assetEqual(absence_day(dt_day), expected_result)


if __name__ == '__main__':
    unittest.main()
